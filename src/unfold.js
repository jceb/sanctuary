//# unfold :: (b -> Maybe (Pair a b)) -> b -> Array a
//.
//. Takes a function and a seed value, and returns an array generated by
//. applying the function repeatedly. The array is initially empty. The
//. function is initially applied to the seed value. Each application
//. of the function should result in either:
//.
//.   - Nothing, in which case the array is returned; or
//.
//.   - Just a pair, in which case the first element is appended to
//.     the array and the function is applied to the second element.
//.
//. ```javascript
//. > S.unfold (n => n < 1000 ? S.Just (S.Pair (n) (2 * n)) : S.Nothing) (1)
//. [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
//. ```

import $ from 'sanctuary-def';

import def from './internal/def.js';
import makeTypeVars from './internal/makeTypeVars.js';

const {a, b} = makeTypeVars ({a: 0, b: 0});

export default def
  ('unfold')
  ({})
  ([$.Fn (b) ($.Maybe ($.Pair (a) (b))), b, $.Array (a)])
  (f => x => {
     const result = [];
     while (true) {
       const m = f (x);
       if (m.isNothing) return result;
       [result[result.length], x] = m.value;
     }
   });
